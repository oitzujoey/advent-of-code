(include "../aoclib.dl")

(part 1)

(defun make-tree ()
  (comment MEMBERS)
  (var init (quote (. ())))
  (var pwd ())
  (comment First element is the directory name.
           The rest of the elements are entries.
           (It's an alist.)
           A directory has the format `(name &rest entries)'.
           A file has the format `name')
  (var tree (list (quote ((/ ((. ()))) (. ())))))

  (comment METHODS)
  (lambda (message &rest args)
    (comment PRIVATE METHODS)
    (defun get-current-directory-root ()
      (var path (nreverse pwd))
      (var tree tree)
      (while path
             (var directory (pop path))
             (setq tree (cdr (assoc directory (first tree)))))
      tree)
    (defun print-directory (directory)
      (println (get-current-directory-root)))
    (defun directory-exists (directory current-directory)
      (not (null? (car (cdr (assoc directory current-directory))))))

    (comment PUBLIC METHODS)
    (defun print-tree (tree)
      (println tree))
    (defun make-directory (directory)
      (if (= directory (quote ..))
          ()
          (
           (var current-directory-root (get-current-directory-root))
           (var current-directory (first current-directory-root))
           (unless (directory-exists directory current-directory)
             (push (list directory (list init)) current-directory)
             (set-car current-directory-root current-directory)
             ()))))
    (defun make-file (file size)
      (var current-directory-root (get-current-directory-root))
      (var current-directory (first current-directory-root))
      (unless (directory-exists file current-directory)
        (push (list file size) current-directory)
        (set-car current-directory-root current-directory)
        ()))
    (defun change-directory (directory)
      (if (= directory (quote ..))
          (pop pwd)
          (
           (var current-directory-root (get-current-directory-root))
           (var current-directory (first current-directory-root))
           (if (directory-exists directory current-directory)
               (push directory pwd)
               (println "The directory " directory " does not exist.")))))
    (defun print-pwd ()
      (println pwd))
    (defun sum-small-directories ()
      (var sum 0)
      (defun sum-small-directories (directories)
        (defun is-valid-sum (value)
          (and (integer? value) (<= value 100000)))
        (var directory-sum 0)
        (var i 0)
        (dolist (directory directories ())
          (var subdir-name (first directory))
          (when (!= subdir-name (quote .))
            (
             (var subdir-dirs (second directory))
             (if (list? subdir-dirs)
                 (
                  (var return-value (self subdir-dirs))
                  (when (integer? return-value)
                    (to directory-sum (+ return-value)))
                  (when (is-valid-sum return-value)
                    (to sum (+ return-value))))
                 (when (integer? subdir-dirs)
                   (to directory-sum (+ subdir-dirs))))))
          (inc i))
        directory-sum)
      (sum-small-directories (second (first (first tree))))
      sum)
    (defun find-directory-to-delete ()
      (var disk-size 70000000)
      (var wanted-free 30000000)
      (var max-to-use (- disk-size wanted-free))
      (var candidates ())
      (defun sum-small-directories (directories)
        (defun is-valid-sum (value)
          (and (integer? value) (<= value 100000)))
        (var directory-sum 0)
        (var i 0)
        (dolist (directory directories ())
          (var subdir-name (first directory))
          (when (!= subdir-name (quote .))
            (
             (var subdir-dirs (second directory))
             (if (list? subdir-dirs)
                 (
                  (var return-value (self subdir-dirs))
                  (when (integer? return-value)
                    (push return-value candidates)
                    (to directory-sum (+ return-value))))
                 (when (integer? subdir-dirs)
                   (to directory-sum (+ subdir-dirs))))))
          (inc i))
        directory-sum)
      (sum-small-directories (first tree))
      (var total-used (apply max candidates))
      (setq candidates (filter* (lambda (candidate)
                                  (> candidate (- total-used max-to-use)))
                                candidates))
      (apply min candidates))

    (comment DISPATCH)
    (println ":" message)
    (if (= message (quote make-directory))
        (make-directory (first args))
        (if (= message (quote make-file))
            (make-file (second args) (first args))
            (if (= message (quote change-directory))
                (change-directory (first args))
                (if (= message (quote print))
                    (print-tree tree)
                    (if (= message (quote pwd))
                        (print-pwd)
                        (if (= message (quote sum-small-directories))
                            (sum-small-directories)
                            (if (= message (quote find-directory-to-delete))
                                (find-directory-to-delete)
                                (println "Unrecognized message " message " with args " args))))))))))

(var tree (make-tree))

(defun ls ()
  (tree (quote print)))

(defun cd (directory)
  (tree (quote make-directory) directory)
  (tree (quote change-directory) directory)
  ())

(defun $ (command &rest args)
  (if (= command (quote ls))
      (ls)
      (if (= command (quote cd))
          (cd (first args))
          (println "Unrecognized command " command)))
  ())
(defun dir (directory)
  (tree (quote make-directory) directory)
  ())
(defun file (size file)
  (tree (quote make-file) size file)
  ())

(get-input true)

(result (tree (quote sum-small-directories)))


(part 2)

(result (tree (quote find-directory-to-delete)))
