(include "../aoclib.dl")

(part 1)

(var a 1)
(var b 2)
(var c 3)
(var d 4)
(var e 5)
(var f 6)
(var g 7)
(var h 8)
(var i 9)
(var j 10)
(var k 11)
(var l 12)
(var m 13)
(var n 14)
(var o 15)
(var p 16)
(var q 17)
(var r 18)
(var s 19)
(var t 20)
(var u 21)
(var v 22)
(var w 23)
(var x 24)
(var y 25)
(var z 26)
(var S (- 0 a))
(var E (- 0 z))

(get-input true)

(var height-to-char ())
(
 (var height-to-char-table (vector () "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"))
 (setq height-to-char (lambda (height)
                        (get-vector-element height-to-char-table height))))

(defun print-height-map (map)
  (dolist (row map)
    (dolist (point row)
      (print (height-to-char point)))
    (println)))

(var start (make-vec2 0 0))
(var end (make-vec2 0 0))

(defun process-input (input-ref)
  (var input (deref input-ref))
  (
   (var input input)
   (var y 0)
   (while input
     (var row (first input))
     (var x 0)
     (while row
       (var point (first row))
       (when (= point S)
         (set-car row (- 0 point))
         (setq start (make-vec2 x y)))
       (when (= point E)
         (set-car row (- 0 point))
         (setq end (make-vec2 x y)))
       (inc x)
       (pop row))
     (inc y)
     (pop input)))
  (set-deref input-ref input))

(defun make-matrix-interface (matrix)
  (var height (length matrix))
  (var width (length (first matrix)))

  (defun set (x y value)
    (if (and (<= 0 x) (< x width) (<= 0 y) (< y height))
        (set-vector-element (get-vector-element matrix y) x value)
        ()))
  (defun get (x y)
    (if (and (<= 0 x) (< x width) (<= 0 y) (< y height))
        (get-vector-element (get-vector-element matrix y) x)
        ()))

  (lambda (message &rest args)
    (if (= message (quote get))
        (get (first args) (second args))
        (if (= message (quote set))
            (set (first args) (second args) (third args))
            (println "((make-hash-table)): Unrecognized message " message " with args " args)))))

(defun in-range? (value min-bound max-bound)
  (and (<= min-bound value) (<= value max-bound)))

(defun find-minimum-steps (start map-matrix reachability win-function)
  (var directions (list (cons (quote n) (make-vec2 0 -1))
                        (cons (quote s) (make-vec2 0 1))
                        (cons (quote e) (make-vec2 1 0))
                        (cons (quote w) (make-vec2 -1 0))))
  (var found false)
  (var iteration 0)
  (var position-queue (list start))
  (while (and (not found) (not (null? position-queue)))
    (var next-position-queue ())
    (while position-queue
      (var position (pop position-queue))
      (if (reachability (quote visited?) position)
          (println "Visited.")
          (
           (reachability (quote visit) position)
           (if (win-function position (map-matrix (quote get) (vec2-x position) (vec2-y position)))
               (
                (println "Position: " position)
                (println "Found. Iterations: " iteration)
                (setq found true))
               (
                (var directions directions)
                (dolist  (direction directions)
                  (print "Position: " position "  Direction: " (car direction))
                  (println "  Reachable: " (reachability (quote reachable?) position (car direction)))
                  (if (reachability (quote reachable?) position (car direction))
                      (push (vec2-add position (cdr direction)) next-position-queue)
                      ())))))))
    (setq position-queue next-position-queue)
    (inc iteration))
  (when (not found)
    (println "No solution."))
  (1- iteration))


(process-input (ref input1))

(println "Map:")
(print-height-map input1)
(println "Start: " start "  End: " end)

(var map-matrix (make-matrix-interface input1))


(
 (defun make-reachability (map)
   (var hash-table (make-hash-table (* (length map) (length (first map))) vec2-hash vec2-equal))
   (var matrix (make-matrix-interface map))
   (var map-height (length map))
   (var map-width (length (first map)))
   (
    (println map-width " " map-height)
    (var y 0)
    (while (< y map-height)
      (var x 0)
      (while (< x map-width)
        (var c (matrix (quote get)     x     y))
        (var n (matrix (quote get)     x (1- y)))
        (var s (matrix (quote get)     x (1+ y)))
        (var e (matrix (quote get) (1+ x)    y))
        (var w (matrix (quote get) (1- x)    y))
        (var reachability (vector (cons (quote n) (if (not (null? n)) (if (<= (- n c) 1) true false) false))
                                  (cons (quote s) (if (not (null? s)) (if (<= (- s c) 1) true false) false))
                                  (cons (quote e) (if (not (null? e)) (if (<= (- e c) 1) true false) false))
                                  (cons (quote w) (if (not (null? w)) (if (<= (- w c) 1) true false) false))
                                  (cons (quote visited) false)))
        (hash-table (quote set) (make-vec2 x y) reachability)
        (inc x))
      (inc y)))

   (lambda (message &rest args)
     (defun reachable? (origin direction)
       (cdr (assoc direction (hash-table (quote get) origin))))
     (defun visited? (origin)
       (cdr (assoc (quote visited) (hash-table (quote get) origin))))
     (defun visit (origin)
       (set-cdr (assoc (quote visited) (hash-table (quote get) origin)) true))
     (defun clear-visits ()
       (var y 0)
       (while (< y map-height)
         (var x 0)
         (while (< x map-width)
           (var reachability (hash-table (quote get) (make-vec2 x y)))
           (set-cdr (assoc (quote visited) reachability) false)
           (hash-table (quote set) (make-vec2 x y) reachability)
           (inc x))
         (inc y)))

     (if (= message (quote clear-visits))
         (clear-visits)
         (if (= message (quote visit))
             (visit (first args))
             (if (= message (quote visited?))
                 (visited? (first args))
                 (if (= message (quote reachable?))
                     (reachable? (first args) (second args))
                     (println "((make-reachability)): Unrecognized message " message " with args " args)))))))


 (var reachability (make-reachability input1))

 (result (find-minimum-steps start map-matrix reachability (lambda (position height) (vec2-equal position end)))))


(part 2)

(defun make-reachability (map)
  (var hash-table (make-hash-table (* (length map) (length (first map))) vec2-hash vec2-equal))
  (var matrix (make-matrix-interface map))
  (var map-height (length map))
  (var map-width (length (first map)))
  (
   (println map-width " " map-height)
   (var y 0)
   (while (< y map-height)
     (var x 0)
     (while (< x map-width)
       (var c (matrix (quote get)     x     y))
       (var n (matrix (quote get)     x (1- y)))
       (var s (matrix (quote get)     x (1+ y)))
       (var e (matrix (quote get) (1+ x)    y))
       (var w (matrix (quote get) (1- x)    y))
       (var reachability (vector (cons (quote n) (if (not (null? n)) (if (> (- c n) 1) false true) false))
                                 (cons (quote s) (if (not (null? s)) (if (> (- c s) 1) false true) false))
                                 (cons (quote e) (if (not (null? e)) (if (> (- c e) 1) false true) false))
                                 (cons (quote w) (if (not (null? w)) (if (> (- c w) 1) false true) false))
                                 (cons (quote visited) false)))
       (hash-table (quote set) (make-vec2 x y) reachability)
       (inc x))
     (inc y)))

  (lambda (message &rest args)
    (defun reachable? (origin direction)
      (cdr (assoc direction (hash-table (quote get) origin))))
    (defun visited? (origin)
      (cdr (assoc (quote visited) (hash-table (quote get) origin))))
    (defun visit (origin)
      (set-cdr (assoc (quote visited) (hash-table (quote get) origin)) true))
    (defun clear-visits ()
      (var y 0)
      (while (< y map-height)
        (var x 0)
        (while (< x map-width)
          (var reachability (hash-table (quote get) (make-vec2 x y)))
          (set-cdr (assoc (quote visited) reachability) false)
          (hash-table (quote set) (make-vec2 x y) reachability)
          (inc x))
        (inc y)))

    (if (= message (quote clear-visits))
        (clear-visits)
        (if (= message (quote visit))
            (visit (first args))
            (if (= message (quote visited?))
                (visited? (first args))
                (if (= message (quote reachable?))
                    (reachable? (first args) (second args))
                    (println "((make-reachability)): Unrecognized message " message " with args " args)))))))

(var reachability (make-reachability input1))

(result (find-minimum-steps end map-matrix reachability (lambda (position height) (= height a))))
