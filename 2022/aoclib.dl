(include "../library.dl")

(defun + (&rest values)
  (var sum 0)
  (while values
         (to sum (+ (first values)))
         (pop values))
  sum)

(defun * (&rest values)
  (var product 1)
  (while values
         (to product (* (first values)))
         (pop values))
  product)

(defun = (&rest values)
  (var equal true)
  (var first-value (pop values))
  (while (and equal values)
         (unless (= first-value (first values))
           (setq equal false))
         (pop values))
  equal)

(defun != (&rest values)
  (var not-equal true)
  (var first-values values)
  (while (and not-equal first-values)
         (var second-values (rest first-values))
         (while (and not-equal second-values)
                (unless (!= (first first-values) (first second-values))
                  (setq not-equal false))
                (pop second-values))
         (pop first-values))
  not-equal)

(defun make-vec2 (x y)
  (cons x y))

(defun vec2-x (v)
  (car v))

(defun vec2-y (v)
  (cdr v))

(defun vec2-add (&rest vs)
  (var sum (make-vec2 0 0))
  (dolist (v vs sum)
    (setq sum (make-vec2 (+ (vec2-x sum) (vec2-x v))
                         (+ (vec2-y sum) (vec2-y v))))))

(defun vec2-sub (&rest vs)
  (var diff (pop vs))
  (dolist (v vs diff)
    (setq diff (make-vec2 (- (vec2-x diff) (vec2-x v))
                          (- (vec2-y diff) (vec2-y v))))))

(defun vec2-equal (&rest vs)
  (var equal true)
  (var first (pop vs))
  (dolist (v vs equal)
    (when (or (!= (vec2-x first) (vec2-x v))
              (!= (vec2-y first) (vec2-y v)))
      (setq equal false))))

(defun vec2-hash (v)
  (var large-prime 7919)
  (comment Map two dimensional integer vector onto the whole numbers.)
  (var x (* (vec2-x v) 2))
  (var y (* (vec2-y v) 2))
  (when (< x 0)
    (setq x (- 1 x)))
  (when (< y 0)
    (setq y (- 1 y)))
  (+ (* x large-prime) y))

(defun part (part)
  (println "------------------------------------------------------------------------------------------------------------")
  (println "Part " part)
  (println "------------------------------------------------------------------------------------------------------------"))

(defun result (result)
  (println "Result: " result))

(var input1 ())
(var input2 ())
(defmacro get-input (release)
  (list (list (quote setq) (quote input1) (list (quote if) release
                                              (list (quote include) "input")
                                              (list (quote include) "example")))
        (list (quote setq) (quote input2) (quote input1))
        (list (quote println) "Input: " (quote input1))))
