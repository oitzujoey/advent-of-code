(include "../library.dl")

(defun + (&rest values)
  (var sum 0)
  (while values
         (to sum (+ (first values)))
         (pop values))
  sum)

(defun = (&rest values)
  (var equal true)
  (var first-value (pop values))
  (while (and equal values)
         (unless (= first-value (first values))
           (setq equal false))
         (pop values))
  equal)

(defun != (&rest values)
  (var not-equal true)
  (var first-values values)
  (while (and not-equal first-values)
         (var second-values (rest first-values))
         (while (and not-equal second-values)
                (unless (!= (first first-values) (first second-values))
                  (setq not-equal false))
                (pop second-values))
         (pop first-values))
  not-equal)

(defun part (part)
  (println "------------------------------------------------------------------------------------------------------------")
  (println "Part " part)
  (println "------------------------------------------------------------------------------------------------------------"))

(defun result (result)
  (println "Result: " result))

(var input ())
(defmacro get-input (release)
  (list (list (quote setq) (quote input) (list (quote if) release
                                              (list (quote include) "input")
                                              (list (quote include) "example")))
        (list (quote println) "Input: " (quote input))))
