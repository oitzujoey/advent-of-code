(var release true)

(var a 1)
(var b 2)
(var c 3)
(var d 4)
(var e 5)
(var f 6)
(var g 7)
(var h 8)
(var i 9)
(var j 10)
(var k 11)
(var l 12)
(var m 13)
(var n 14)
(var o 15)
(var p 16)
(var q 17)
(var r 18)
(var s 19)
(var t 20)
(var u 21)
(var v 22)
(var w 23)
(var x 24)
(var y 25)
(var z 26)
(var A 27)
(var B 28)
(var C 29)
(var D 30)
(var E 31)
(var F 32)
(var G 33)
(var H 34)
(var I 35)
(var J 36)
(var K 37)
(var L 38)
(var M 39)
(var N 40)
(var O 41)
(var P 42)
(var Q 43)
(var R 44)
(var S 45)
(var T 46)
(var U 47)
(var V 48)
(var W 49)
(var X 50)
(var Y 51)
(var Z 52)

(include "../aoclib.dl")

(part 1)

(println "Formatted:")
(mapcar println input)

(var input-lengths (mapcar length input))
(println "Lengths:" input-lengths)
(var input-midpoints (mapcar (lambda (length) (/ length 2)) input-lengths))
(print "Odd lengths (none is good): ")
(mapcar (lambda (length) (when (odd? length) (print " " length))) input-lengths)
(println)
(println "Midpoints: " input-midpoints)

(defun split (sack)
  (var sack-length (length sack))
  (var sack-midpoint (/ sack-length 2))
  (var left sack)
  (var right-cdr-1 (nthcdr (1- sack-midpoint) sack))
  (var right-cdr (cdr right-cdr-1))
  (var right right-cdr)
  (set-cdr right-cdr-1 ())
  (cons left right))

(defun common-items (left right)
  (if (member (first left) right)
      (first left)
      (self (rest left) right)))

(result (apply + (mapcar (lambda (sack)
                           (var split-sack (split (copy-list sack)))
                           (var common-items (common-items (car split-sack) (cdr split-sack)))
                           common-items)
                         input)))


(part 2)

(defun group-by-threes (sacks)
  (if (null? sacks)
      ()
      (cons (list (first sacks)
                  (second sacks)
                  (third sacks))
            (self (cdddr sacks)))))

(defun common-items (first second third)
  (when (not (null? first))
    (if (and (member (car first) second)
             (member (car first) third))
        (car first)
        (self (cdr first) second third))))

(var group-size 3)
(println "Incomplete groups? (should be \"No\") " (if (!= 0 (mod (length input) group-size)) "Yes" "No"))

(var groups (group-by-threes input))
(println "Groups: ")
(mapcar println groups)

(result (apply + (mapcar (lambda (group)
                           (common-items (first group)
                                         (second group)
                                         (third group)))
                         groups)))
